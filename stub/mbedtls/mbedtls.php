<?php
/**
 * This stub is for PHPStorm and editors with similar support. It should be
 * added as an external library, so that PHPStorm can provide autocomplete
 * support.
 */
const MBEDTLS_ZERO_PADDING = 0x01;
const MBEDTLS_RAW_DATA = 0x02;

const MBEDTLS_KEYTYPE_RSA = 0x01;
const MBEDTLS_KEYTYPE_EC = 0x02;

/**
 * Encrypts data
 *
 * @param string $data       The plaintext message data to be encrypted.
 * @param string $method     The cipher method. For a list of available cipher 
 *   methods, use mbedtls_ciphers().
 * @param string $key        The key.
 * @param int    $options    options is a bitwise disjunction of the flags
 *   MBEDTLS_RAW_DATA and MBEDTLS_ZERO_PADDING.
 * @param string $iv         A non-NULL Initialization Vector.
 * @param string $tag        The authentication tag passed by reference when
 *   using AEAD cipher mode (GCM or CCM).
 * @param string $aad        Additional authentication data.
 * @param int    $tag_length The length of the authentication tag. Its value
 *   can be between 4 and 16 for GCM mode.
 *
 * @return string Returns the encrypted string on success or FALSE on failure.
 */
function mbedtls_encrypt(string $data, string $method, string $key,
  int $options = 0, string $iv = "", string &$tag = NULL, string $aad = "",
  int $tag_length = 16): string {}

/**
 * Decrypts data
 *
 * @param string $data       The encrypted message to be decrypted.
 * @param string $method     The cipher method. For a list of available cipher
 *   methods, use mbedtls_ciphers().
 * @param string $key        The key.
 * @param int    $options    options is a bitwise disjunction of the flags
 *   MBEDTLS_RAW_DATA and MBEDTLS_ZERO_PADDING.
 * @param string $iv         A non-NULL Initialization Vector.
 * @param string $tag        The authentication tag in AEAD cipher mode. If it
 *   is incorrect, the authentication fails and the function returns FALSE.
 * @param string $aad        Additional authentication data.
 *
 * @return string Returns the encrypted string on success or FALSE on failure.
 */
function mbedtls_decrypt(string $data, string $method, string $key,
  int $options = 0, string $iv = "", string &$tag = NULL, string $aad = "",
  int $tag_length = 16): string {}

/**
 * Gets available cipher methods
 *
 * @return array An array of available cipher methods.
 */
function mbedtls_ciphers(): array {}

/**
 * Generates a new private key
 *
 * @param array $configargs You can finetune the key generation (such as
 *   specifying the number of bits) using configargs. 
 *
 * @return resource
 */
function mbedtls_pkey_new(array $configargs): resource {}

/**
 * Frees a private key
 *
 * @param resource $key Resource holding the key. 
 */
function mbedtls_pkey_free(resourcre $key) {}

/**
 * Gets an exportable representation of a key into a string
 *
 * @param mixed  $key
 * @param string $out
 * @param array  $configargs configargs can be used to fine-tune the export
 *   process by specifying and/or overriding options for the openssl
 *   configuration file.
 *
 * @return bool Returns TRUE on success or FALSE on failure.
 */
function mbedtls_pkey_export($key, string &$out,
  array $configargs = []): bool {}

/**
 * Gets an exportable representation of a key into a file 
 *
 * @param mixed  $key
 * @param string $outfilename Path to the output file.
 * @param array  $configargs configargs can be used to fine-tune the export
 *   process by specifying and/or overriding options for the openssl
 *   configuration file.
 *
 * @return bool Returns TRUE on success or FALSE on failure.
 */
function mbedtls_pkey_export_to_file($key, string $outfilename,
  array $configargs = []): bool {}

/**
 * Returns an array with the key details
 *
 * @param resource $key Resource holding the key.
 *
 * @return array Returns an array with the key details in success or
 *   FALSE in failure.
 */
function mbedtls_pkey_get_details(resource $key): array {}

/**
 * Extract public key from certificate and prepare it for use
 *
 * @param mixed $certificate
 *
 * @return resource Returns a positive key resource identifier on success,
 *   or FALSE on error.
 */
function mbedtls_pkey_get_public($certificate): resource {}

/**
 * Get a private key
 *
 * @param string $key
 * @param string $passphrase The optional parameter passphrase must be used if
 *   the specified key is encrypted (protected by a passphrase).
 *
 * @return resource Returns a positive key resource identifier on success,
 *   or FALSE on error.
 */
function mbedtls_pkey_get_private(string $key,
  string $passphrase = ""): resource {}

/**
 * Generates a CSR
 *
 * @param array    $dn         The Distinguished Name or subject fields to be
 *   used in the certificate.
 * @param resource $privkey    privkey should be set to a private key that was
 *   previously generated by mbedtls_pkey_new()
 *   (or otherwise obtained from the other mbedtls_pkey family of functions).
 *   The corresponding public portion of the key will be used to sign the CSR. 
 * @param array    $configargs configargs can be used to fine-tune the export
 *   process by specifying and/or overriding options for the openssl
 *   configuration file.
 *
 * @return resource Returns the CSR or FALSE on failure.
 */
function mbedtls_csr_new(array $dn, resource &$privkey,
  array $configargs = []): resource {}

/**
 * Free CSR
 *
 * @param resource $csr
 */
function mbedtls_csr_free(resource $csr) {}

/**
 * Sign a CSR with another certificate (or itself) and generate a certificate
 *
 * @param mixed $csr        A CSR previously generated by mbedtls_csr_new().
 *   It can also be the path to a PEM encoded CSR when specified as
 *  file://path/to/csr or an exported string generated by mbedtls_csr_export().
 * @param mixed $cacert     The generated certificate will be signed by cacert.
 *   If cacert is NULL, the generated certificate will be a self-signed
 *   certificate.
 * @param mixed $priv_key   priv_key is the private key that corresponds to
 *   cacert.
 * @param int   $days       days specifies the length of time for which the
 *   generated certificate will be valid, in days.
 * @param array $configargs You can finetune the CSR signing by configargs.
 * @param int   $serial     An optional the serial number of issued certificate.
 *   If not specified it will default to 0.
 *
 * @return resource Returns an x509 certificate resource on success,
 *   FALSE on failure.
 */
function mbedtls_csr_sign($csr, $cacert, $priv_key, int $days,
  array $configargs = [], int $serial = 0): resource {}

/**
 * Exports a CSR as a string
 *
 * @param mixed  $csr
 * @param string $out
 *
 * @return bool Returns TRUE on success or FALSE on failure.
 */
function mbedtls_csr_export($csr, string &$out): bool {}

/**
 * Exports a CSR to a file
 *
 * @param mixed  $csr
 * @param string $outfilename Path to the output file.
 *
 * @return bool Returns TRUE on success or FALSE on failure.
 */
function mbedtls_csr_export_to_file($csr, string $outfilename): bool {}

/**
 * Returns the subject of a CSR
 *
 * @param mixed $csr
 *
 * @return Returns array of CSR fields on success or FALSE on failure. 
 */
function mbedtls_csr_get_subject($csr): array {}

/**
 * Returns the public key of a CSR
 *
 * @param mixed $csr
 *
 * @return resource Returns a positive key resource identifier on success, or
 *   FALSE on error. 
 */
function mbedtls_csr_get_public_key($csr): resource {}

/**
 * Free certificate resource
 *
 * @param resource $x509cert
 */
function mbedtls_x509_free(resource $x509cert) {}

/**
 * Exports a certificate as a string
 *
 * @param mixed  $x509
 * @param string $out
 *
 * @return bool Returns TRUE on success or FALSE on failure.
 */
function mbedtls_x509_export($x509, string &$out): bool {}

/**
 * Exports a certificate to file
 *
 * @param mixed  $x509
 * @param string $outfilename Path to the output file.
 *
 * @return bool Returns TRUE on success or FALSE on failure.
 */
function mbedtls_x509_export_to_file($x509, string $outfilename): bool {}

/**
 * Calculates the fingerprint, or digest, of a given X.509 certificate
 *
 * @param mixed  $x509
 * @param string $hash_algorithm The digest method or hash algorithm to use,
 *   e.g. "SHA256"
 * @param bool   $raw_output     When set to TRUE, outputs raw binary data.
 *   FALSE outputs lowercase hexits.
 *
 * @return string Returns a string containing the calculated certificate
 *   fingerprint as lowercase hexits unless raw_output is set to TRUE in which
 *   case the raw binary representation of the message digest is returned.
 *
 *   Returns FALSE on failure. 
 */
function mbedtls_x509_fingerprint($x509, string $hash_algorithm = "SHA1",
  bool $raw_output = false): string {}

/**
 * Parse an X.509 certificate and return a resource identifier for it
 *
 * @param mixed $x509certificate
 *
 * @return resource Returns a resource identifier on success or FALSE on failure.
 */
function mbedtls_x509_read($x509certificate): resource {}

/**
 * Generate signature
 *
 * @param string $data          The string of data you wish to sign
 * @param string $signature     If the call was successful the signature is
 *   returned in signature.
 * @param mixed  $priv_key_id
 * @param int    $signature_alg
 *
 * @return bool Returns TRUE on success or FALSE on failure.
 */
function mbedtls_sign(string $data, string &$signature, $priv_key_id,
  int $signature_alg = 4): bool {}

/**
 * Verify signature
 *
 * @param string $data The string of data used to generate the signature
 *   previously
 * @param string $signature A raw binary string, generated by mbedtls_sign()
 *   or similar means
 * @param mixed  $pub_key_id
 * @param int    $signature_alg
 *
 * @return int Returns 1 if the signature is correct, 0 if it is incorrect,
 *   and -1 on error.
 */
function mbedtls_verify(string $data, string $signature, $pub_key_id,
  int $signature_alg = 4): int {}

/**
 * Computes a digest
 *
 * @param string $data       The data. 
 * @param string $method     The digest method to use, e.g. "SHA256".
 * @param bool   $raw_output Setting to TRUE will return as raw output data,
 *   otherwise the return value is binhex encoded.
 *
 * @return string Returns the digested hash value on success or FALSE on
 *   failure.
 */
function mbedtls_hash(string $data, string $method,
  bool $raw_output = false): string {}

/**
 * Computes a digest
 *
 * @param string $data       The data. 
 * @param string $method     The digest method to use, e.g. "SHA256".
 * @param bool   $raw_output Setting to TRUE will return as raw output data,
 *   otherwise the return value is binhex encoded.
 *
 * @return string Returns the digested hash value on success or FALSE
 *   on failure.
 */
function mbedtls_digest(string $data, string $method,
  bool $raw_output = false): string {}

/**
 * Create a CRL
 *
 * @param mixed $cert
 * @param mixed $key
 * @param array $configargs
 *
 * @return resource
 */
function mbedtls_crl_new($cert, $key, array $configargs = []): resource {}

/**
 * Free CRL
 *
 * @param resource $crl
 */
function mbedtls_crl_free(resource $crl) {}

/**
 * Revoke a certificate
 *
 * @param resource $crl
 * @param mixed    $cert
 * @param int      $reason
 *
 * @return bool
 */
function mbedtls_crl_revoke($crl, $cert, int $reason = 0): bool {}

/**
 * Exports a CRL as a string
 *
 * @param mixed  $crl
 * @param string $out
 *
 * @return bool Returns TRUE on success or FALSE on failure.
 */
function mbedtls_crl_export(resource $crl, string &$out): bool {}

/**
 * Exports a CRL to file
 *
 * @param mixed  $crl
 * @param string $outfilename Path to the output file.
 *
 * @return bool Returns TRUE on success or FALSE on failure.
 */
function mbedtls_crl_export_to_file(resource $crl, string $outfilename): bool {}
